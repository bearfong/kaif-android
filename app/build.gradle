plugins {
  id "me.tatarka.retrolambda" version "3.3.1"
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {

  def Properties versionProps = new Properties()
  versionProps.load(new FileInputStream(file('version.properties')))
  def buildVersionCode = versionProps['VERSION_CODE']
  def buildVersionName = versionProps['VERSION_NAME_PREFIX'] + "." + buildVersionCode;

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  compileSdkVersion 25
  buildToolsVersion "23.0.2"

  defaultConfig {
    applicationId "io.kaif.mobile"
    minSdkVersion 16
    targetSdkVersion 25
    versionCode buildVersionCode.toInteger()
    versionName buildVersionName
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    def Properties props = new Properties()
    props.load(new FileInputStream(file('../secret/password.properties')))

    debug {
      storeFile file("../secret/kaif-keystore.jks")
      storePassword props["KEY_STORE_PASSWORD"]
    }
    release {
      storeFile file("../secret/kaif-keystore.jks")
      storePassword props["KEY_STORE_PASSWORD"]
      keyAlias "ReleaseKey"
      keyPassword props["RELEASE_KEY_PASSWORD"]
    }
  }

  buildTypes {
    def Properties props = new Properties()
    props.load(new FileInputStream(file('../secret/api.properties')))

    debug {
      signingConfig signingConfigs.debug
      buildConfigField 'String', 'CLIENT_ID', "\"" + props["CLIENT_ID"] + "\""
      buildConfigField 'String', 'CLIENT_SECRET', "\"" + props["CLIENT_SECRET"] + "\""
    }
    release {
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField 'String', 'CLIENT_ID', "\"" + props["CLIENT_ID"] + "\""
      buildConfigField 'String', 'CLIENT_SECRET', "\"" + props["CLIENT_SECRET"] + "\""
    }
  }

  lintOptions {
    disable 'InvalidPackage'
    abortOnError false
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }

  android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def outputFile = output.outputFile
      if (outputFile != null && outputFile.name.endsWith('.apk')) {
        File apk = outputFile
        output.outputFile = new File(apk.parentFile, apk.name.replace(".apk", "-${buildVersionName}.apk"))
      }
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  apt "com.google.dagger:dagger-compiler:2.7"
  apt 'com.jakewharton:butterknife-compiler:8.4.0'
  apt project(':retry-stale-processor')

  provided 'javax.annotation:jsr250-api:1.0'

  compile 'com.android.support:appcompat-v7:25.0.1'
  compile 'com.android.support:recyclerview-v7:25.0.1'
  compile 'com.android.support:design:25.0.1'
  compile 'com.android.support:support-v4:25.0.1'

  compile 'io.reactivex:rxandroid:1.2.0'
  compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
  compile 'com.jakewharton.rxbinding:rxbinding-design:0.4.0'
  compile 'com.trello:rxlifecycle:0.6.1'
  compile 'com.trello:rxlifecycle-components:0.6.1'

  compile 'com.jakewharton:butterknife:8.4.0'
  compile 'com.squareup.retrofit2:retrofit:2.1.0'
  compile 'com.squareup.retrofit2:converter-gson:2.1.0'
  compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
  compile 'com.google.dagger:dagger:2.7'
  compile 'com.squareup.okhttp3:okhttp:3.3.0'
  compile 'com.squareup.okhttp3:okhttp-urlconnection:3.3.0'
  compile 'com.squareup.okhttp3:logging-interceptor:3.3.0'
  compile 'org.apache.commons:commons-lang3:3.4'
  compile 'com.google.code.gson:gson:2.6.2'

  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

  androidTestCompile "org.mockito:mockito-core:1.9.5"
  androidTestCompile "com.google.dexmaker:dexmaker:1.0"
  androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.0"
  androidTestCompile 'com.android.support:support-annotations:25.0.1'
  androidTestCompile 'com.android.support.test:runner:0.5'
  androidTestCompile 'com.android.support.test:rules:0.5'
  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
  androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
  androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

  androidTestCompile 'com.google.dagger:dagger:2.7'
  androidTestApt 'com.google.dagger:dagger-compiler:2.7'
}

task releaseNewVersion(dependsOn: 'assembleRelease') << {
  def Properties versionProps = new Properties()

  def file = file('version.properties')
  versionProps.load(new FileInputStream(file))

  def nextCode = versionProps['VERSION_CODE'].toInteger() + 1;
  versionProps['VERSION_CODE'] = nextCode.toString()
  versionProps.store(file.newWriter(), null)
}
